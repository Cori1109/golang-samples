// [START intro_1]
import (
    "fmt"
    "net/http"

    "google.golang.org/appengine"
    "google.golang.org/appengine/user"
)

func welcome(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-type", "text/html; charset=utf-8")
    ctx := appengine.NewContext(r)
    u := user.Current(ctx)
    if u == nil {
        url, _ := user.LoginURL(ctx, "/")
        fmt.Fprintf(w, `<a href="%s">Sign in or register</a>`, url)
        return
    }
    url, _ := user.LogoutURL(ctx, "/")
    fmt.Fprintf(w, `Welcome, %s! (<a href="%s">sign out</a>)`, u, url)
}
// [END intro_1]

// [START intro_2]
func init() {
    http.HandleFunc("/_ah/login_required", openIdHandler)
}

func openIdHandler(w http.ResponseWriter, r *http.Request) {
    // ...
}
// [END intro_2]

// [START OAuth_and_App_Engine]
import (
    "fmt"
    "net/http"

    "google.golang.org/appengine"
    "google.golang.org/appengine/user"
)

func welcome(w http.ResponseWriter, r *http.Request) {
    ctx := appengine.NewContext(r)
    u, err := user.CurrentOAuth(ctx, "")
    if err != nil {
        http.Error(w, "OAuth Authorization header required", http.StatusUnauthorized)
        return
    }
    if !u.Admin {
        http.Error(w, "Admin login only", http.StatusUnauthorized)
        return
    }
    fmt.Fprintf(w, `Welcome, admin user %s!`, u)
}
// [END OAuth_and_App_Engine]
