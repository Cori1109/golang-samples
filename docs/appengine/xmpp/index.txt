// [START example_sending]
package demo

import (
    "net/http"

    "google.golang.org/appengine"
    "google.golang.org/appengine/xmpp"
)

func init() {
    http.HandleFunc("/send", sendHandler)
}

func sendHandler(w http.ResponseWriter, r *http.Request) {
    ctx := appengine.NewContext(r)
    m := &xmpp.Message{
        To:   []string{"example@gmail.com"},
        Body: "Someone has sent you a gift: http://example.com/gifts/",
    }
    err := m.Send(ctx)
    if err != nil {
        // Send an email message instead...
    }
}
// [END example_sending]

// [START enable_config]
inbound_services:
- xmpp_message
// [END enable_config]

// [START example_handler]
package demo

import (
    "net/http"
    "strings"

    "golang.org/x/net/context"

    "google.golang.org/appengine"
    "google.golang.org/appengine/log"
    "google.golang.org/appengine/xmpp"
)

func init() {
    xmpp.Handle(handleChat)
}

func handleChat(ctx context.Context, m *xmpp.Message) {
    if strings.HasPrefix(m.Body, "hello") {
        reply := &xmpp.Message{
	    To: []string{m.Sender},
	    Body: "hey there!",
	}
	err := reply.Send(ctx)
	if err != nil {
	    log.Errorf(ctx, "Sending reply: %v", err)
	}
    }
}
// [END example_handler]
